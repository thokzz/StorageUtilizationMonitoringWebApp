# How I Built This Project with AI Assistance: A Guide for Non-Programmers

As someone with no formal coding background, I created the PMC Storage Utilization Monitor entirely with the assistance of AI tools (ChatGPT 4.0 and Claude 3.7 Sonnet). This document shares my approach and lessons learned to help other non-programmers build their own projects.

## The Approach That Worked For Me

### 1. Start with a Clear Problem Definition

I began by defining exactly what I needed the application to do:
- Monitor storage utilization across networked volumes
- Categorize storage by different types
- Highlight critically full volumes
- Allow filtering and data export
- Enable authenticated mount refreshing

**Tip**: Write detailed requirements before asking the AI for help. The more specific you are, the better guidance you'll receive.

### 2. Break Down the Project into Components

With AI assistance, I broke the project into manageable parts:
- Backend data collection (Python/Flask)
- Data processing and categorization
- Frontend dashboard (HTML/CSS/JavaScript)
- Network mount management (Bash script)
- Authentication system

**Tip**: Ask the AI to help you understand the logical components needed for your application before diving into code.

### 3. Learn as You Build

For each component, I followed this process:
1. Asked the AI to explain the component's purpose and how it works
2. Requested simple code examples with detailed explanations
3. Gradually built complexity as I understood the basics
4. Had the AI review my understanding and correct misconceptions
5. Iteratively improved the component based on testing

**Tip**: Focus on understanding rather than just copying code. Ask "why" questions frequently.

### 4. Ask for Explanations in Plain Language

When I encountered technical concepts, I specifically asked:
- "Can you explain [concept] in simple terms?"
- "How would you explain [feature] to someone with no programming experience?"
- "What's the purpose of this line of code?"

**Tip**: Don't be afraid to admit when you don't understand something. Ask the AI to explain things differently if needed.

### 5. Implement Incrementally and Test Often

I built the application piece by piece:
1. First created a simple Flask app that could display storage data
2. Added categorization logic to organize the data
3. Enhanced the frontend with tabs and styling
4. Added features like filtering, data export, and auto-refresh
5. Finally implemented authentication and mount refresh capability

**Tip**: Test each piece as you build it. This helps catch issues early and builds your confidence.

### 6. Debug with AI Assistance

When I encountered errors or unexpected behavior:
1. I shared the exact error message with the AI
2. Provided context about what I was trying to accomplish
3. Asked for potential causes and solutions
4. Implemented fixes one at a time, testing after each change

**Tip**: Error messages may seem intimidating, but they often contain valuable clues. Share them completely with the AI.

## Effective AI Prompting Techniques I Used

### 1. Provide Context and History

When asking for help, I included:
- What I was trying to accomplish
- What I had already tried
- Any relevant code I had written
- Specific error messages or issues

Example: "I'm building a storage monitoring web app. I've created the Flask backend that collects data using psutil, but I'm having trouble displaying it in an HTML table. Here's my current code: [code]. The error I'm seeing is: [error]."

### 2. Ask for Step-by-Step Guidance

For complex tasks, I requested explicit step-by-step instructions:

Example: "Could you walk me through, step by step, how to implement the auto-refresh feature for the dashboard? I'd like to understand each part as we build it."

### 3. Request Explanations of Unfamiliar Concepts

When the AI used terms I didn't understand, I asked for clarification:

Example: "You mentioned 'AJAX calls' for refreshing the mount points. Could you explain what AJAX is and how it works in simple terms before we implement it?"

### 4. Seek Alternative Approaches

I asked about different ways to solve problems to understand the trade-offs:

Example: "Are there other ways to handle authentication for the mount refresh function? What are the pros and cons of each approach?"

### 5. Request Code Reviews and Improvements

As the project progressed, I asked the AI to review my code:

Example: "Here's the code I've written for the storage categorization function. Does it look correct? Are there any improvements or best practices I should incorporate?"

## Common Challenges and How I Overcame Them

### 1. Understanding Web Application Structure

**Challenge**: Grasping how the backend (Flask) connects to the frontend (HTML/CSS/JS).

**Solution**: Asked the AI for a visual diagram of how data flows through the application, then had it explain each connection point.

### 2. Working with Linux System Commands

**Challenge**: Limited experience with Linux and shell scripting for the mount functions.

**Solution**: Requested detailed explanations of each command in the shell script and why it was necessary.

### 3. Debugging JavaScript Functions

**Challenge**: Trouble with the auto-refresh and tab-switching JavaScript features.

**Solution**: Asked the AI to help me implement console.log statements at key points to understand the code execution flow.

### 4. Understanding Authentication

**Challenge**: Implementing secure authentication for the mount refresh function.

**Solution**: Had the AI explain authentication concepts in simple terms and then guide me through a basic implementation.

### 5. Feature Creep

**Challenge**: Constantly thinking of new features to add, which complicated development.

**Solution**: Created a prioritized list of core features and enhancements, focusing on completing the essentials first.

## Key Lessons Learned

### 1. AI Is a Teacher, Not Just a Code Generator

The most valuable aspect of AI assistance wasn't getting finished codeâ€”it was learning how and why the code works. By asking for explanations rather than just solutions, I gained a better understanding of programming concepts.

### 2. Breaking Down Problems Is Essential

Complex applications become manageable when broken into smaller components. The AI helped me identify these components and tackle them one by one.

### 3. Iteration Beats Perfection

Starting with a simple working version and gradually improving it was far more effective than trying to build the perfect application from the start.

### 4. Learning Programming Concepts Takes Time

Even with AI assistance, understanding programming fundamentals requires patience. I focused on grasping key concepts (variables, functions, control flow) that applied across different parts of the project.

### 5. Testing Is Crucial

Regular testing helped catch issues early and built my confidence. The AI helped me understand how to test different components effectively.

## Tips for Your AI-Assisted Development Journey

1. **Start small**: Begin with a simple project that solves a real problem you have
2. **Build incrementally**: Add features one at a time
3. **Prioritize understanding**: Ask "why" even more than "how"
4. **Keep a development journal**: Document what you learn and challenges you overcome
5. **Embrace errors**: Each error is a learning opportunity
6. **Be specific in your requests**: The more detailed your questions, the better the AI's responses
7. **Review code thoroughly**: Don't implement code you don't understand
8. **Learn programming fundamentals**: Ask the AI to explain basic concepts when they appear in your code
9. **Join programming communities**: Share your progress and questions with others
10. **Celebrate small wins**: Acknowledge your progress as you build your project

## Conclusion

Building this project with AI assistance has been an incredible learning journey. As a non-programmer, I've gained valuable skills and confidence in my ability to create technical solutions. The key was approaching AI as a learning tool rather than just a code generator.

If you're a non-programmer looking to build your own project, remember that patience and curiosity are your greatest assets. With the right approach to AI collaboration, you can create sophisticated applications while building your technical knowledge.

---

*This guide was created by a non-programmer with assistance from AI tools (ChatGPT 4.0 and Claude 3.7 Sonnet).*
